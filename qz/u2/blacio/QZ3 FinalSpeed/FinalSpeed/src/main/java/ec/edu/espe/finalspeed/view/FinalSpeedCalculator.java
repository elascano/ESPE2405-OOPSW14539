package ec.edu.espe.finalspeed.view;

import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.MongoException;
import com.mongodb.ServerApi;
import com.mongodb.ServerApiVersion;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import ec.edu.espe.finalspeed.model.VelocidadFinal;
import org.bson.Document;

/**
 *
 * @author Julio Blacio, Overnight Developers Squad, DCCO-ESPE
 */
public class FinalSpeedCalculator extends javax.swing.JFrame {

    /**
     * Creates new form FinalSpeedCalculator
     */
    public FinalSpeedCalculator() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblInitialSpeed = new javax.swing.JLabel();
        txtInitialSpeed = new javax.swing.JTextField();
        lblAcceleration = new javax.swing.JLabel();
        txtAcceleration = new javax.swing.JTextField();
        lblTime = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        lblFinalSpeed = new javax.swing.JLabel();
        txtFinalSpeed = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Final Speeed Calculator");
        background.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        lblInitialSpeed.setText("Initial Speed : ");
        background.add(lblInitialSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        txtInitialSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInitialSpeedActionPerformed(evt);
            }
        });
        background.add(txtInitialSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 130, -1));

        lblAcceleration.setText("Acceleration :");
        background.add(lblAcceleration, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, -1, -1));

        txtAcceleration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAccelerationActionPerformed(evt);
            }
        });
        background.add(txtAcceleration, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 150, 130, -1));

        lblTime.setText("Time :");
        background.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, -1, -1));
        background.add(txtTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 130, -1));

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        background.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 240, -1, -1));

        lblFinalSpeed.setText("Final speed :");
        background.add(lblFinalSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, -1, -1));
        background.add(txtFinalSpeed, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 290, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, 528, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(background, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtInitialSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInitialSpeedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtInitialSpeedActionPerformed

    private void txtAccelerationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAccelerationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAccelerationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        double initialSpeed = Double.parseDouble(txtInitialSpeed.getText());
        double acceleration = Double.parseDouble(txtAcceleration.getText());
        double time = Double.parseDouble(txtTime.getText());

        double finalSpeed = VelocidadFinal.calcularVelocidadFinal(initialSpeed, acceleration, time);

        txtFinalSpeed.setText(String.valueOf(finalSpeed));

        uploadToCloud(initialSpeed, acceleration, time, finalSpeed);

    }//GEN-LAST:event_jButton1ActionPerformed

        private void uploadToCloud(double initialSpeed, double acceleration, double time, double finalSpeed) {
        String connectionString = "mongodb+srv://SrJCBM:OOP14539ODS@firstdb.gtv30gi.mongodb.net/?appName=FirstDB";

        ServerApi serverApi = ServerApi.builder()
                .version(ServerApiVersion.V1)
                .build();

        MongoClientSettings settings = MongoClientSettings.builder()
                .applyConnectionString(new ConnectionString(connectionString))
                .serverApi(serverApi)
                .build();

        try (MongoClient mongoClient = MongoClients.create(settings)) {
            MongoDatabase database = mongoClient.getDatabase("Physics");
            MongoCollection<Document> collection = database.getCollection("calculations");

            Document calculationDocument = new Document("initialSpeed", initialSpeed)
                    .append("acceleration", acceleration)
                    .append("time", time)
                    .append("finalSpeed", finalSpeed);

            collection.insertOne(calculationDocument);
            System.out.println("Calculation saved successfully!");
        } catch (MongoException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FinalSpeedCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FinalSpeedCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FinalSpeedCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FinalSpeedCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FinalSpeedCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblAcceleration;
    private javax.swing.JLabel lblFinalSpeed;
    private javax.swing.JLabel lblInitialSpeed;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtAcceleration;
    private javax.swing.JTextField txtFinalSpeed;
    private javax.swing.JTextField txtInitialSpeed;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables
}
